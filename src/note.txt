-- JPA
JPA: ORM(Object-Relation Mapping) 스펙. 자바 객체와 관계형 DB 간의 매핑 처리를 위한 API
특징
- 애노테이션을 이용한 매핑 설정. XML 파일을 이용한 매핑 설정도 가능
- String, int, LocalDate 등 기본적인 타입에 대한 매핑 지원
- 커스텀 타입 변환기 지원. 내가 만든 Money 타입을 DB 컬럼에 매핑 가능
- 밸류 타입 매핑 지원. 한 개 이상 컬럼을 한 개 타입으로 매핑 가능
- 클래스 간 연관 지원: 1-1, 1-N, N-1, N-M
- 상속에 대한 매핑 지원

MySQL 설치
- https://dev.mysql.com/downloads/
- 도커로 설치:
docker create --name mysql8 -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:8.0.27
docker start mysql8

01. 일단 해보기 정리
- 간단한 설정으로 클래스와 테이블 간 매핑 처리
- EntityManager를 이용해서 DB 연동 처리
- 객체 변경만으로 DB 테이블 업데이트
- 쿼리 작성 X

영속 컨텍스트
응용 프로그램 <-----> 영속 컨텍스트 <-----> DB
(엔티티 객체)         (영속 객체)          (레코드)
- EntityManager 단위로 영속 컨텍스트 관리
- 커밋 시점에 영속 컨텍스트의 변경 내역을 DB에 반영(변경 쿼리 실행)

02. 코드 구조 & 영속 컨텍스트 정리
- 기본구조
 - EntityManagerFactory 초기화
 - DB 작업이 필요할 때마다
  EntityManager 생성
  EntityManager로 DB 조작
  EntityTransaction으로 트랜잭션 관리
 - 하지만 스프링과 연동할 때는
  대부분 스프링이 대신 처리하므로 매핑 설정 중심으로 작업
- 영속 컨텍스트
 - 엔티티를 메모리에 보관
 - 변경을 추적해서 트랜잭션 커밋 시점에 DB에 반영

03. 엔티티 CRUD 처리
EntityManager가 제공하는 메서드 이용
- persist()
- find()
- remove()
- merge()
03. 엔티티 CRUD 처리 정리
- EntityManager를 사용해서 엔티티 단위로 CRUD 처리
- 변경은 트랜잭션 범위 안에서 실행
 - persist()
 - 수정
 - remove()