-- JPA
JPA: ORM(Object-Relation Mapping) 스펙. 자바 객체와 관계형 DB 간의 매핑 처리를 위한 API
특징
- 애노테이션을 이용한 매핑 설정. XML 파일을 이용한 매핑 설정도 가능
- String, int, LocalDate 등 기본적인 타입에 대한 매핑 지원
- 커스텀 타입 변환기 지원. 내가 만든 Money 타입을 DB 컬럼에 매핑 가능
- 밸류 타입 매핑 지원. 한 개 이상 컬럼을 한 개 타입으로 매핑 가능
- 클래스 간 연관 지원: 1-1, 1-N, N-1, N-M
- 상속에 대한 매핑 지원

MySQL 설치
- https://dev.mysql.com/downloads/
- 도커로 설치:
docker create --name mysql8 -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:8.0.27
docker start mysql8

01. 일단 해보기 정리
- 간단한 설정으로 클래스와 테이블 간 매핑 처리
- EntityManager를 이용해서 DB 연동 처리
- 객체 변경만으로 DB 테이블 업데이트
- 쿼리 작성 X

영속 컨텍스트
응용 프로그램 <-----> 영속 컨텍스트 <-----> DB
(엔티티 객체)         (영속 객체)          (레코드)
- EntityManager 단위로 영속 컨텍스트 관리
- 커밋 시점에 영속 컨텍스트의 변경 내역을 DB에 반영(변경 쿼리 실행)

02. 코드 구조 & 영속 컨텍스트 정리
- 기본구조
 - EntityManagerFactory 초기화
 - DB 작업이 필요할 때마다
  EntityManager 생성
  EntityManager로 DB 조작
  EntityTransaction으로 트랜잭션 관리
 - 하지만 스프링과 연동할 때는
  대부분 스프링이 대신 처리하므로 매핑 설정 중심으로 작업
- 영속 컨텍스트
 - 엔티티를 메모리에 보관
 - 변경을 추적해서 트랜잭션 커밋 시점에 DB에 반영

03. 엔티티 CRUD 처리
EntityManager가 제공하는 메서드 이용
- persist()
- find()
- remove()
- merge()
03. 엔티티 CRUD 처리 정리
- EntityManager를 사용해서 엔티티 단위로 CRUD 처리
- 변경은 트랜잭션 범위 안에서 실행
 - persist()
 - 수정
 - remove()

04 엔티티 매핑 설정
엔티티 매핑
- 기본 애노테이션
 - @Entity: 엔티티 클래스에 설정, 필수
  - 애노테이션을 생략하면 클래스 이름과 동일한 이름에 매핑
  - 속성
   - name: 테이블 이름
   - catalog: 카탈로그 이름(예: MySQL DB 이름)
   - schema: 스키마 이름(예: 오라클 스키마 이름)
   - 예
    - @Table
    - @Table(name = "hotel_info")
    - @Table(catalog = "point", name = "point_history")
    - @Table(schema = "crm", name = "cust_stat")
 - @Table: 매핑할 테이블 지정
 - @Id: 식별자 속성에 설정, 필수
 - @Column: 매핑할 컬럼명 지정
  - 지정하지 않으면 필드명/프로퍼티명 사용
 - @Enumerated: enum 타입 매핑할 때 설정
  - 설정 값
   - EnumType.STRING: enum 타입 값 이름을 저장
    - 문자열 타입 컬럼에 매핑
   - EnumType.ORDINAL(기본값): enum 타입의 값의 순서를 저장
    - 숫자 타입 컬럼에 매핑

 - @Temporal: java.util.Date, java.util.Calendar 매핑
  - 자바8 시간/날짜 타입 등장 이후로 거의 안 씀
 - @Basic: 기본 지원 타입 매핑(거의 안 씀)
- 매핑 설정 예
@Entity
@Table(name = "hotel_info")
public class Hotel {
    @Id
    @Column(name = "hotel_id")
    private String id;

    @Column(name = "nm")
    private String name;

    private int year;

    @Enumerated(EnumType.STRING)
    private Grade grade;

    private LocalDateTime created;

    @Column(name = "modified")
    private LocalDateTime lastModified;
}
- 엔티티 클래스 제약 조건(스펙 기준)
 - @Entity 적용해야 함
 - @Id 적용해야 함
 - 인자 없는 기본 생성자 필요
 - 기본 생성자는 public이나 protected여야 함
 - 최상위 클래스여야 함
 - final이면 안 됨
- 접근 타입
 - 두 개 접근 타입
  - 필드 접근: 필드 값을 사용해서 매핑
  - 프로퍼티 접근: getter/setter 메서드를 사용해서 매핑
 - 설정 방법
  - @Id 애노테이션을 필드에 붙이면 필드 접근
  - @Id 애노테이션을 getter 메서드에 붙이면 프로퍼티 접근
  - @Access 애노테이션을 사용해서 명시적으로 지정
   - 클래스/개별 필드에 적용 가능
   - @Access(AccessType.PROPERTY)/ @Access(AccessType.FIELD)
  - 개인적으로 필드 접근 선호
   - 불필요한 setter 메서드를 만들 필요 없음
04 엔티티 매핑 설정 정리
- 주요 매핑 애노테이션
 - @Entity, @Table, @Id, @Column, @Enumerated
- 엔티티 클래스 제약
 - 기본 생성자 필요 등 몇 가지 제약 있음
- 접근 타입
 - 필드 접근(*), 프로퍼티 접근

05 엔티티 식별자 생성 방식
- 직접 할당
- 식별 컬럼 방식
- 시퀀스 사용 방식
- 테이블 사용 방식

- 직접 생성 방식
 - @Id 설정 대상에 직접 값 설정
  - 사용자가 입력한 값, 규칙에 따라 생성한 값 등
  - 예) 이메일, 주문 번호
 - 저장하기 전에 생성자 할당, 보통 생성 시점에 전달
@Entity
@Table(name = "hotel_info")
public class Hotel {
    @Id
    @Column(name = "hotel_id")
    private String id;
    ...
    protected Hotel() {

    }

    public Hotel(String id, String name, int year, Grade grade) {
        this.id = id;
        this.name = name;
        ...
    }
}

Hotel hotel = new Hotel("H-001", ...);
entityManager.persist(hotel);

- 식별 컬럼 방식
 - DB의 식별 컬럼에 매핑(예, MySQL 자동 증가 컬럼)
  - DB가 식별자를 생성하므로 객체 생성시에 식별값을 설정하지 않음
 - 설정 방식
  - @GeneratedValue(strategy = GenerationType.IDENTITY) 설정
 - INSERT 쿼리를 실행해야 식별자를 알 수 있음
  - EntityManager#persist() 호출 시점에 INSERT 쿼리 실행
  - persist() 실행할 때 객체에 식별자 값 할당됨
- 식별 컬럼 방식 예
@Entity
public class Review {
    @Id
    @Column(name = "review_id)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(name = "hotel_id")
    private String hotelId;
    ...

    public Review(int mark, String hotelId, String writerName, String comment) {
        this.mark = mark;
        ...
    }

    public Long getId() {
        return id;
    }
}

// 생성 시점에 식별자 지정하지 않음
Review review = new Review(5, "H-01", ...);
// 저장 시점에 INSERT 쿼리 바로 실행
entityManager.persist(review);
// persist() 이후 식별자 사용 가능
Long genId = review.getId();

- 시퀀스 사용 방식
 - 시퀀스를 사용해서 식별자 생성
  - JPA가 식별자 생성 처리 -> 객체 생성 시에 식별값을 설정하지 않음
 - 설정 방식
  - @SequenceGenerator로 시퀀스 생성기 설정
  - @GeneratedValue의 generator로 시퀀스 생성기 지정
 - EntityManager#persist() 호출 시점에 시퀀스 사용
  - persist() 실행할 때 객체에 식별자 값 할당됨
  - INSERT 쿼리는 실행하지 않음
- 시퀀스 사용 방식 예
@Entity
@Table(schema = "crm", name = "activity_log")
public class ActivityLog {
    @Id
    @SequenceGenerator(
        name = "log_seq_gen",
        sequenceName = "activity_seq",
        schema = "crm",
        allocationSize = 1
    )
    @GeneratedValue(generator = "log_seq_gen") // SequenceGenerator의 name
    private Long id;
    @Column(name = "user_id")
    private String userId;
    ...
    public ActivityLog(String userId, String activityType) {
        this.userId = userId;
        this.activityType = activityType;
        this.created = LocalDateTime.now();
    }
}

// 생성 시점에 식별자 지정하지 않음
ActivityLog log = new ActivityLog("U01", "VISIT");
// persist() 시점에 시퀀스로 식별자 구함
em.persist(log);
// 커밋 시점에 INSERT 쿼리 실행
tx.commit();

- 테이블 사용 방식
 - 테이블에 엔티티를 위한 키를 보관
 - 해당 테이블을 이용해서 다음 식별자 생성
- 설정 방식
 - @TableGenerator로 테이블 생성기 설정
 - @GeneratedValue의 generator로 테이블 생성기 지정
- EntityManager#persist() 호출 시점에 테이블 사용
 - persist() 할 때 테이블을 이용해서 식별자 구하고 이를 엔티티에 할당
 - INSERT 쿼리는 실행하지 않음
- 테이블 사용 방식 예
 - 식별자를 생성할 때 사용할 때 테이블 구조
  - 엔티티 이름 컬럼
  - 식별자 보관 컬럼
 create table id_seq (
    entity varchar(100) not null primary key,
    nextval bigint
 ) engine innodb character set utf8mb4;

 @Entity
 @Table(name = "access_log")
 public class AccessLog {
    @Id
    @TableGenerator(
        name = "accessIdGen",
        table = "id_seq",
        pkColumnName = "entity",
        pkColumnValue = "accesslog",
        valueColumnName = "nextval",
        initialValue = 0,
        allocationSize = 1
    )
    @GeneratedValue(generator = "accessIdGen")
    private Long id;
 }
05 엔티티 식별자 생성 방식 정리
- 식별자 생성 방식
 - 직접 할당
 - 식별 컬럼 방식: 저장 시점에 INSERT 쿼리 실행
 - 시퀀스 사용 방식: 저장 시점에 시퀀스 사용해서 식별자 생성
 - 테이블 저장 방식: 저장 시점에 테이블 사용해서 식별자 생성

06 Embeddable
- @Embeddable
 - 엔티티가 아닌 타입을 한 개 이상의 필드와 매핑할 때 사용
  - 예: Address, Money 등 매핑
 - 엔티티의 한 속성으로 @Embeddable 적용 타입 사용
@Embeddable
public class Address {
    @Column(name = "addr1")
    private String address1;
    @Column(name = "addr2")
    private String address2;
    @Column(name = "zipcode")
    private String zipcode;

    protected Address() {

    }
    ...
}

@Entity
@Table(name = "hotel_info")
public class Hotel {
    @Id
    @Column(name = "hotel_id")
    private String id;
    ...
    @Embedded
    private Address address;
}

- 저장
tx.begin();
Address address = new Address("주소1", "주소2", "12345");
Hotel hotel = new Hotel("H00", "HN", 2022, Grade.S7, address);
em.persist(hotel);
tx.commit;

insert into hotel_info
    (addr1, addr2, zipcode, created, grade, modified, nm, year, hotel_id)
values
    (?, ?, ?, ?, ?, ?, ?, ?, ?)

- 조회
Hotel hotel = em.find(Hotel.class, "H00");
logger.info("주소: {}", hotel.getAddress());

select
    h1_0.hotel_id, h1_0.addr1, h1_0.addr2, h1_0.zipcode, h1_0.created, h1_0.grade, h1_0.modified, h1_0.nm, h1_0.year
from
    hotel_info h1_0
where
    h1_0.hotel_id = ?
주소: Address{address1='주소1', address2='주소2', zipcode='12345'}

- null은?
tx.begin();
Address address = null;
Hotel hotel = new Hotel("H009", "HN", 2022, Grade.S7, address);
em.persist(hotel);
tx.commit();

Hotel hotel = em.find(Hotel.class, "H009");
boolean nullAddr = hotel.getAddress() == null; // true

- 같은 @Embeddable 타입 필드가 두 개면?
@Entity
public class Employee {
    @Id
    private String id;
    @Embedded private Address homeAddress;
    @Embedded private Address workAddress;
}
// MappingException - Repeated column in mapping for entity:
- @AttributeOverride로 설정 재정의
@Entity
public class Employee {
    @Id
    private String id;
    @Embedded
    private Address homeAddress;

    @AttributeOverrides({
        @AttributeOverride(name = "address1", column = @Column(name = "waddr1")),
        @AttributeOverride(name = "address2", column = @Column(name = "waddr2")),
        @AttributeOverride(name = "zipcode", column = @Column(name = "wzipcode"))
    })
    @Embedded
    private Address workAddress;
}
insert into Employee (addr1, addr2, zipcode, waddr1, waddr2, wzipcode, id) values (?, ?, ?, ?, ?, ?, ?);

06 Embeddable 정리
- @Embeddable을 사용하면 모델을 더 잘 표현할 수 있음
 - 개별 속성을 모아서 이해 -> 타입으로 더 쉽게 이해
  - (addr1, addr2, zipcode)를 모아서 '이게 주소구나' -> '주소'네

07 Embeddable 다른 테이블에 매핑하기
다른 테이블에 값을 저장할 때
- 방법1 - @SecondaryTable + 테이블명
@Embeddable
public class Intro {
    @Column(table = "writer_intro",
    name = "content_type")
    private String contentType;

    @Column(table = "writer_intro")
    private String content;
    ...
}

@Entity
@SecondaryTable(name = "writer_intro"),
    pkJoinColumns = @PrimaryKeyJoinColumn(
        name = "writer_id", // writer_intro 테이블 컬럼
        referencedColumnName = "id" // writer 테이블 컬럼
    )
)
public class Writer {
    ...
    @Embedded
    private Intro intro;
}
